
#!/bin/bash

set -euo pipefail

REINSTALL=${REINSTALL:-false}
INSTALL_LIST=(
  tmux gpg gcc make gettext unzip cmake build-essential 
  jq wget curl apt-file python3-dev python3-pip tzdata dconf-cli uuid-runtime
  inetutils-ping rclone pkg-config libtool locate git tmux gh libu2f-udev xsel
  locate python3-venv calendar ccal htop gcalcli fuse libnss3
  libatk-bridge2.0-0 libgtk-3-common lxappearance net-tools whois ripgrep
  nmap dnsutils xmlstarlet gawk fzf
)

function is_installed() {
  command -v "$1" >/dev/null 2>&1
}

echo "üîÑ Updating apt cache and upgrading system..."
sudo apt autoremove -y
sudo apt update
sudo apt upgrade -y
sudo apt autoremove neovim -y

echo "üì¶ Installing base packages..."
for pkg in "${INSTALL_LIST[@]}"; do
  if dpkg -s "$pkg" >/dev/null 2>&1 && [[ "$REINSTALL" == "false" ]]; then
    echo "‚úÖ $pkg already installed"
  else
    echo "‚û°Ô∏è  Installing $pkg"
    sudo apt install -y "$pkg"
  fi
done

echo "üöÄ Setting up Starship prompt..."
mkdir -p "$HOME/.local/bin"
if ! is_installed starship || [[ "$REINSTALL" == "true" ]]; then
  wget https://starship.rs/install.sh -O /tmp/install_starship.sh
  chmod +x /tmp/install_starship.sh
  /tmp/install_starship.sh -b "$HOME/.local/bin"
else
  echo "‚úÖ Starship already installed"
fi

echo "üîë Checking GitHub CLI authentication..."
if gh auth status 2>&1 | grep -q 'Logged in to github.com'; then
  echo "‚úÖ Already authenticated with GitHub CLI"
else
  echo "‚û°Ô∏è  Not authenticated. Running 'gh auth login'..."
  gh auth login
fi

echo "‚öôÔ∏è  Setting up Git config..."
git config --global user.name "regular bill"
git config --global user.email "regularbill@bill.com"

# Install NVM only if not already installed
if [ ! -d "$HOME/.nvm" ]; then
  echo "‚û°Ô∏è  Installing NVM..."
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
else
  echo "‚úÖ NVM already installed"
fi

# Source NVM scripts properly
export NVM_DIR="$HOME/.nvm"
# shellcheck source=/dev/null
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
# shellcheck source=/dev/null
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Install Node LTS if not already installed
if ! nvm ls --no-colors | grep -q 'lts/*'; then
  echo "‚¨áÔ∏è  Installing Node.js LTS version..."
  nvm install --lts
else
  echo "‚úÖ Node.js LTS version already installed"
fi

echo "üîê Installing Bitwarden CLI..."
if ! is_installed bw || [[ "$REINSTALL" == "true" ]]; then
  npm install -g @bitwarden/cli
else
  echo "‚úÖ Bitwarden CLI already installed"
fi

echo "üìÅ Setting up chezmoi..."
cd "$HOME/projects"
if [[ ! -x "$(command -v chezmoi)" || "$REINSTALL" == "true" ]]; then
  sh -c "$(curl -fsLS get.chezmoi.io)"
  sudo cp "$HOME/projects/bin/chezmoi" /usr/bin/
fi
chezmoi init https://github.com/winslowb/dotfiles.git
chezmoi update -v

# === Neovim via PPA ===
echo "üõ†Ô∏è   Installing latest Neovim from unstable PPA..."
sudo apt install -y software-properties-common
sudo add-apt-repository --remove ppa:neovim-ppa/stable -y || true
sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install -y neovim python3-neovim


# echo "üìã Installing Jira CLI (manual architecture check recommended)..."
# cd "$HOME/projects"
# JIRA_BIN="$HOME/.local/bin/jira"
# if [[ ! -f "$JIRA_BIN" || "$REINSTALL" == "true" ]]; then
#   wget -q https://github.com/ankitpokhrel/jira-cli/releases/download/v1.3.0/jira_1.3.0_linux_arm64.tar.gz
#   tar -xzvf jira_1.3.0_linux_arm64.tar.gz
#   mv jira "$JIRA_BIN"
#   chmod +x "$JIRA_BIN"
# fi

